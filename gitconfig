[user]
  email = flipsidelachy@gmail.com
  name = Lachlan Phillips

[alias]
  ### Shorthands ###

  # commit
  ci = commit

  # checkout
  co = checkout
  # freshly checkout a pull request that may have had non-ff changes
  prco = "!git fetch origin && git checkout ${1} && git reset --hard origin/${1} #"

  # create branch
  cr = checkout -b

  # short status
  s = status -s

  # full status
  st = status

  # diff of current working tree
  d = diff
  dcsv = diff --color-words="[^[:space:],<>]+"
  dw = diff --ignore-space-change --color-words

  # diff of what's been added/rm'd
  ds = diff --staged
  dscsv = diff --staged --color-words="[^[:space:],<>]+"
  dsw = diff --staged --ignore-space-change --color-words

  # branch list
  br = branch --sort=-committerdate


  # commits all tracked changes
  wip = "!git commit -am \"WIP $1\" #"


  ### Log formats ###

  # One line per commit
  # <commit> <branch> <message> [<author>]
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

  # One line per commit, but limit to first few
  top = "!git ls \"$(git parent)\".."

  # One line + the changed files per commit
  # <commit> <branch> <message> [<author>]\n <file...>
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

  # One line per commit plus the date of each
  # <commit> <date> <branch> <message> [<author>]
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

  # One line per commit plus the time since each
  # <commit> <date ago> <branch> <message> [<author>]
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

  # inspect a file's history
  fl = log -u

  # view a graph of all commits
  gr = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --graph --full-history --branches --decorate


  ### Summary of Branches ###
  prsum = "!git for-each-ref refs/heads/ --format='%(refname:short)' | grep -v master | grep -v dev | xargs -r git show-branch --topics dev"

  # find the nearest parent branch to HEAD
  parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | egrep -o '\\[.*\\]' | sed -r 's/\\^.*$|\\]|\\[//g' #"


  ### Random helpers ###

  # cleanup `dev` by default or from any branch specified (should be on that branch first)
  cll = "!git branch --merged \"${1:-master}\" | grep -v '\\*\\|master\\|dev' | xargs -r git branch -d #"
  cleanup-local = "!git branch --merged \"${1:-master}\" | grep -v '\\*\\|master\\|dev' | xargs -r git branch -d #"

  # fetch, prune, and pull
  # requires you to be on a branch suitable for pulling
  fpp = "!git fetch --all --prune; git pull"

  # interactive rebase on parent branch
  ri = "!git rebase -i \"$(git parent)\""
  # interactive rebase on parent branch with autosquash
  ria = "!git rebase -i --autosquash \"$(git parent)\""

[color]
  ui = auto
[push]
  default = current
[core]
  editor = vim
  filemode = false
[https]
[rerere]
  enabled = false
